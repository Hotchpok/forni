# Функция для нахождения корня уравнения методом бисекции (деления пополам)
# f - функция уравнения, a и b - границы интервала, eps - точность
def korenb(f, a, b, eps):
    # Проверяем условие применимости метода: значения на концах должны быть разных знаков
    if f(a) * f(b) >= 0:
        # Если условие не выполняется, вызываем ошибку
        raise ValueError('Функция должна иметь разные знаки на концах интервала')

    # Основной цикл метода: работает пока длина интервала больше заданной точности
    while (b - a) / 2 > eps:
        # Находим середину текущего интервала
        c = (a + b) / 2

        # Если значение функции в середине равно 0 - мы нашли точный корень
        if f(c) == 0:
            return c
        # Если функция меняет знак между a и c - корень в левой половине
        elif f(a) * f(c) < 0:
            b = c  # Сдвигаем правую границу
        else:
            a = c  # Иначе сдвигаем левую границу

    # Возвращаем середину последнего интервала как приближенное значение корня
    return (a + b) / 2


# Определяем функцию, корень которой мы ищем (x³ - x - 2 = 0)
def f(x):
    return x ** 3 - x - 2


# Задаем начальные параметры:
a = 1  # Левая граница интервала
b = 2  # Правая граница интервала
eps = 1e-6  # Точность вычислений (0.000001)

# Вызываем функцию поиска корня с заданными параметрами
root = korenb(f, a, b, eps)

# Выводим найденный корень с пояснением
print(f"Корень уравнения: {root}")
